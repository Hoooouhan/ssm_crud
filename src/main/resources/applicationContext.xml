<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!-- spring的配置文件，这里主要配置业务逻辑有关的代码   -->
    <context:component-scan base-package="com.zhh">
        <!-- 和spring mvc的配置文件相反：这里spring的配置文件，只扫描目录里面除了控制器以外的代码  -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!--=================== 数据源，事务控制，xxx ================-->
    <context:property-placeholder location="classpath:dbconfig.properties" />  <!-- 引入外部数据库配置文件 -->
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"> </property>
        <property name="driverClass" value="${jdbc.driverClass}"> </property>
        <property name="user" value="${jdbc.user}"> </property>
        <property name="password" value="${jdbc.password}"> </property>
    </bean>

    <!--================== 配置spring和MyBatis的整合=============== -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定mybatis全局配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"> </property>
        <!-- 指定数据源 -->
        <property name="dataSource" ref="pooledDataSource"> </property>
        <!-- 指定扫描mybatis的mapper文件（写sql语句的xml文件）的位置 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"> </property>
    </bean>

    <!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有dao接口的实现，加入到ioc容器中 -->
        <property name="basePackage" value="com.zhh.crud.dao"> </property>
    </bean>

    <!-- 配置一个可以执行批量的sqlSession -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"> </constructor-arg>
        <constructor-arg name="executorType" value="BATCH"> </constructor-arg>
    </bean>

    <!-- ===============事务控制的配置 ================-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控制住数据源  -->
        <property name="dataSource" ref="pooledDataSource"> </property>
    </bean>

    <!--可以开启基于注解的事务，也可以使用xml配置形式的事务（现在主要的都是使用配置式）  -->
    <aop:config>
        <!-- 切入点表达式(需要切入哪些代码位置进行事务控制) -->
        <aop:pointcut expression="execution(* com.zhh.crud.service..*(..))" id="txPoint"/>
        <!-- 配置事务增强（见下一个） -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!--配置事务增强，（事务如何切入）  -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 认为：从切入点切入的所有方法都是事务方法 -->
            <tx:method name="*"/>
            <!--同时，以get开始的所有方法也都是事务方法  -->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- ********以上是： Spring配置文件的核心点（数据源、与mybatis的整合，事务控制）****** -->


</beans>